rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own data
    // Also allow queries for community stats
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow initial document creation for new users
      allow create: if request.auth != null && request.auth.uid == userId;
      // Allow admin and moderator users to read and update user documents (for enrollment and student management)
      allow read, update: if request.auth != null && 
        (request.auth.uid == userId || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isModerator == true);
      // Allow queries for community stats (user names)
      allow list: if request.auth != null;
    }
    
    // User profiles - users can read and write their own profile data
    match /userProfiles/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User achievements - users can read their own, system can write
    match /userAchievements/{achievementId} {
      allow read: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow write: if request.auth != null && 
        (resource.data.userId == request.auth.uid ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
      // Allow queries for user achievements
      allow list: if request.auth != null;
    }
    
    // Course data - public read, admin write
    match /courses/{courseId} {
      allow read: if true;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Lessons - public read, admin write
    match /lessons/{lessonId} {
      allow read: if true;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Lesson releases - public read, admin write
    match /lessonReleases/{releaseId} {
      allow read: if true;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // User activity - users can read/write their own, admins can read all
    // Also allow queries for community stats
    match /userActivity/{userId} {
      allow read: if request.auth != null && 
        (request.auth.uid == userId || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
      allow write: if request.auth != null && request.auth.uid == userId;
      // Allow queries for community stats (online users)
      allow list: if request.auth != null;
    }
    
    // Enrollments - users can read their own, create their own, admins can read all
    // Also allow queries for community stats
    match /enrollments/{enrollmentId} {
      allow read: if request.auth != null && 
        (resource == null || // Allow reading non-existent documents for transactions
         resource.data.userId == request.auth.uid || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      // Allow queries for community stats (cohort users)
      allow list: if request.auth != null;
    }
    
    // Cohorts - public read, admin write, but allow authenticated users to update currentStudents
    match /cohorts/{cohortId} {
      allow read: if true;
      allow create, delete: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      allow update: if request.auth != null && 
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true ||
         // Allow users to update only currentStudents field for enrollment purposes
         (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['currentStudents'])));
    }
    
    // Lesson progress - users can read/write their own
    // Also allow queries for community stats
    match /lessonProgress/{progressId} {
      allow read, write: if request.auth != null && 
        (resource == null || // Allow reading/writing non-existent documents
         resource.data.userId == request.auth.uid);
      // Allow queries for community stats (completion tracking)
      allow list: if request.auth != null;
    }
    
    // Questions - users can read public ones, write their own
    // Also allow queries for community stats
    match /questions/{questionId} {
      allow read: if resource.data.isPublic == true || 
        (request.auth != null && resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && 
        (resource.data.userId == request.auth.uid ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isModerator == true);
      // Allow queries for community stats (question counts)
      allow list: if request.auth != null;
    }
    
    // Community stats - public read, admin write
    match /communityStats/{statsId} {
      allow read: if true;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Scientific updates - public read, admin and moderator write
    match /scientificUpdates/{updateId} {
      allow read: if true;
      allow write: if request.auth != null && 
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isModerator == true);
      // Allow queries for search and filtering
      allow list: if true;
    }
    
    // User read status - users can read/write their own
    match /userReadStatus/{readStatusId} {
      allow read, write: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      // Allow queries for user read status
      allow list: if request.auth != null;
    }
    
    // Email preferences - users can read/write their own
    match /emailPreferences/{preferenceId} {
      allow read, write: if request.auth != null && 
        resource.data.userId == request.auth.uid;
    }
    
    // Analytics Events - authenticated users can read/write
    // This allows tracking of user interactions and events
    match /analyticsEvents/{eventId} {
      allow read, write: if request.auth != null;
      // Allow queries for analytics dashboard
      allow list: if request.auth != null;
    }
    
    // User Sessions - authenticated users can read/write their own sessions
    // This tracks user activity and session data
    match /userSessions/{sessionId} {
      allow read, write: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      // Allow queries for real-time analytics
      allow list: if request.auth != null;
    }
    
    // User Cohorts - authenticated users can read/write their own cohort data
    // This tracks user cohort assignments and activity
    match /userCohorts/{userCohortId} {
      allow read, write: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      // Allow queries for cohort analysis
      allow list: if request.auth != null;
    }
    
    // Experiments - authenticated users can read, admins can write
    // This stores A/B testing experiment configurations
    match /experiments/{experimentId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      // Allow queries for experiment management
      allow list: if request.auth != null;
    }
    
    // Experiment Assignments - authenticated users can read/write their own assignments
    // This tracks which users are assigned to which experiment variants
    match /experimentAssignments/{assignmentId} {
      allow read, write: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      // Allow queries for experiment analysis
      allow list: if request.auth != null;
    }
    
    // Analytics Dashboard Data - authenticated users can read, admins can write
    // This stores aggregated analytics data for dashboard display
    match /analyticsDashboard/{dashboardId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Checkout Sessions - authenticated users can read their own sessions
    // This stores Stripe checkout session data for payment processing
    match /checkoutSessions/{sessionId} {
      allow read: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow write: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
  }
} 